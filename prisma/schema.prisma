generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BotUser {
  id               Int      @id @default(autoincrement())
  telegramUsername String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Chat {
  id             Int      @id @default(autoincrement())
  telegramChatId String   @unique
  title          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  devices Device[]
}

model Device {
  id        Int      @id @default(autoincrement())
  deviceNo  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chatId    Int

  chat       Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  deviceSims DeviceSim[]
}

model Sim {
  id            Int      @id @default(autoincrement())
  phone         String   @unique
  bkBalance     Float    @default(0)
  ngBalance     Float    @default(0)
  bkLimit       Float
  ngLimit       Float
  bkMonthlyUsed Float
  ngMonthlyUsed Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  simTransactionHistories SimTransactionHistory[]
  deviceSims              DeviceSim[]
}

model DeviceSim {
  id       Int @id @default(autoincrement())
  simNo    Int
  deviceId Int
  simId    Int

  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  sim    Sim    @relation(fields: [simId], references: [id], onDelete: Cascade)

  @@unique([deviceId, simId])
  @@index([deviceId])
  @@index([simId])
}

model SimTransactionHistory {
  id        Int      @id @default(autoincrement())
  operation String
  type      String // IN or OUT
  amount    Float
  charge    Float
  note      String?
  createdAt DateTime @default(now())
  simId     Int

  sim Sim @relation(fields: [simId], references: [id])
}
